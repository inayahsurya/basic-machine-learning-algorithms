
for(int i=0;i<dataset.lgth;i++)
	for(int j=0; j<dataset[i].lgth;j++)
		if(i==indexterakhir[m] && i<batas)
			datatrain[k][j] = dataset[i][j];
			k++;


		DISTANCE

yang dipitagoras
dataTesting[i][0] --> dataTraining[i][0] terdekat
dataTesting[i][1] --> dataTraining[i][1] terdekat


distance((dataTraining[i][0] - dataTesting[i][0])^2 + (dataTraining[i][1] - dataTesting[i][1])^2)
A = (dataTraining[i][0] - dataTesting[i][0])^2
B = (dataTraining[i][1] - dataTesting[i][1])^2
distance = akar(A^2 + B^2);


		ALL DISTANCE

[indeks testing][indeks training][jarak]
0
1	1	pitagoras1
1	2	pitagoras2
1	3
1	4
1	...
2	1	pitagoras1
2	2	pitagoras2	
2	...
3	...

A = | dataTesting[i][0] - dataTraining[j][0] |
B = | dataTesting[i][1] - dataTraining[j][1] |

for(int i=0; i<dataTesting.length; i++)
    for(int j=0; j<dataTraining.length; j++)
        A = | dataTesting[i][0] - dataTraining[j][0] |
        B = | dataTesting[i][1] - dataTraining[j][1] |
        allDistance[k][2] = (distance(A, B))
        allDistance[k][0] = i
        allDistance[k][1] = j
        k++;


                SORTED DATA
done


                KNEARESTNEIGHBORS
1. voting
        1. ambil label dari sortedDistance sesuai jumlah k
        2. cari modusnya


2. dicocokkan dengan label dataTesting hipotesa
        if(labelNew != labelTesting)
            error++;
        rasioError = error/dataTesting.label;

